import React, { useState } from 'react';
import { Handle, Position } from 'reactflow';
import { useDispatch } from 'react-redux';
import { addHandle } from '../../redux/handle';
import { CirclePlus } from 'tabler-icons-react';
import { Tooltip } from 'react-tooltip';
import ModalContainer from './ModalContainer';
import { useDisclosure } from '@mantine/hooks';
import { DotsVertical } from 'tabler-icons-react';
import DotDropDown from './DotDropDown';

const ReviewNode = ( {data, selected, ...otherProps} ) => {

  const dispatch = useDispatch();
  const [opened, { open, close }] = useDisclosure(false);
  const [returned, setReturned] = useState(false);
  const [ openedDrop, setOpenedDrop ] = useState(false)
  
  return ( 
    <>
      {/* <NodeToolbar position={Position.Right}>
        <Button className='bg-red-700 hover:bg-red-900'>Delete</Button>
      </NodeToolbar> */}
      <div className={`p-2 cursor-grab flex justify-center rounded-sm bg-white border-blue-700 border-2 hover:border-green-700 w-[278px] ${selected ? 'border-4 border-green-700' : 'bg-white'}`}>
        <Handle type='target' position={Position.Top} id="in"/>
        <Handle className='-ml-1 w-4 h-4 bg-transparent border-none cursor-pointer z-100' type="source" position={Position.Left} id="ReviewAdjust" 
          onClick={(event) => {
            setReturned(true)
            open()
            }}>
            <CirclePlus
                  size={18}
                  strokeWidth={2.5}
                  color={'#ffffff'}
                  className= "inline-block absolute fill-yellow-600 color-white z-0 mr-10"
                  data-tooltip-id="Adjust-tooltip"
                  data-tooltip-content="Review Adjust"
                  onClick={() => dispatch(addHandle("ReviewAdjust"))}
              />
              <Tooltip className="flex flex-row inline mt-4 w-max bg-slate-600 text-sm text-white p-1 rounded-md" id="Adjust-tooltip" />
            </Handle>

            <Handle className='-mr-1 w-4 h-4 bg-transparent border-none cursor-pointer z-100' type="source" position={Position.Right} id="ReviewReject" 
              onClick={(event) => {
                setReturned(false)
                open()
                }}>
                <CirclePlus
                      size={18}
                      strokeWidth={2.5}
                      color={'#ffffff'}
                      className= "inline-block absolute fill-red-700 color-white z-0 mr-10"
                      data-tooltip-id="Reject-tooltip"
                      data-tooltip-content="Review Reject"
                      onClick={() => dispatch(addHandle("ReviewReject"))}
                  />
              <Tooltip className="flex flex-row inline mt-4 w-max bg-slate-600 text-sm text-white p-1 rounded-md" id="Reject-tooltip" />
            </Handle>

            <Handle className='-mr-1 w-4 h-4 bg-transparent border-none cursor-pointer z-100' type="source" position={Position.Bottom} id="ReviewApprove" 
              onClick={(event) => {
                setReturned(false)
                open()
                }}>
                <CirclePlus
                      size={18}
                      strokeWidth={2.5}
                      color={'#ffffff'}
                      className= "inline-block absolute fill-green-700 color-white z-0 mr-10"
                      data-tooltip-id="Approve-tooltip"
                      data-tooltip-content="Review Approve"
                      onClick={() => dispatch(addHandle("ReviewApprove"))}
                  />
              <Tooltip className="flex flex-row inline mt-4 w-max bg-slate-600 text-sm text-white p-1 rounded-md" id="Approve-tooltip" />
            </Handle>
            <DotsVertical onClick={() => setOpenedDrop(!openedDrop)} className='absolute right-1 cursor-pointer' size={15} strokeWidth={2} color={'#000000'} />
          <label className='self-center'>{data.label}</label>
          <DotDropDown opened={openedDrop} setOpened={setOpenedDrop}/>
          <ModalContainer opened={opened} onClose={close} returned={returned} fromEdge={false} edgeId={""} otherProps={otherProps}/>
      </div>
      
     </>
  );
}

export default ReviewNode;
