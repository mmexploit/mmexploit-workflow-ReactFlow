import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactFlow, {
  ReactFlowProvider,
  useNodesState,
  useEdgesState,
  Node,
  Edge,
  Controls,
  ReactFlowInstance,
  Connection,
  getConnectedEdges,
  MarkerType,
  updateEdge,
  Background,
  BackgroundVariant,
  applyNodeChanges,
  applyEdgeChanges
} from "reactflow";


import StartNode from './StartNode';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../../redux/store';
import { useMemo } from 'react';

import 'reactflow/dist/style.css';


import '../../index.css';
import EndNode from './EndNode';
import ReviewNode from './ReviewNode';
import ConfirmationNode from './ConfirmationNode';
import RequestNode from './RequestNode';
import { getHandleColor } from '../../redux/handle';
import PaymentNode from './PaymentNode';

import * as FileSaver from 'file-saver';
import { useKeyPress } from 'reactflow';

import { X } from 'tabler-icons-react';


import { resetIsValid } from '../../redux/validation';
import { notifications } from '@mantine/notifications';
import { addNode, removeNode, selectedNode, setNodes} from '../../redux/nodes';


import { setEdges, addEdge, removeEdge} from '../../redux/edges';

import ButtonEdge from './ButtonEdge';
import { Button } from '@mantine/core';


const connectionLineStyle = { stroke: '#040000' };

// const existingEdges = edgesTrial;

// const reformattedEdges :Edge[] = [];

// existingEdges.forEach((edge) => {
//   const reformattedEdge = {
//     id: edge.id,
//     type: 'step',
//     source: edge.source,
//     target: edge.target,
//     sourceHandle: edge.sourceHandle,
//     targetHandle: edge.targetHandle,
//     label: edge.label,
//     style: edge.style,
//     animated: false,
//     markerEnd: {
//       type: MarkerType.ArrowClosed,
//       width: 30,
//       height: 30,
//       color: edge.style.stroke
//     },
//   };

//   reformattedEdges.push(reformattedEdge);
// })

// const initialNodes: Node[] = nodesTrial
// const initalEdges: Edge[] = reformattedEdges


const ReactFlowDnd = () => {
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const nodes = useSelector((state: RootState) => state.nodes.nodes)
  const edges = useSelector((state: RootState) => state.edges.edges)
  const [nodeDeleted, setnodeDeleted] = useState("")
  const [edgeDeleted, setedgeDeleted] = useState("")
  const deletePressed = useKeyPress('Delete')
  const isValid = useSelector((state: RootState) => state.validation.isValid)

  const dispatch = useDispatch()


  console.log({nodes})
  console.log({edges})


  const onEdgesChange = useCallback(
    (changes) => {
      const updatedEdges = applyEdgeChanges(changes, edges);
      dispatch(setEdges(updatedEdges));
    },
    [dispatch, edges]
  );

  console.log("React Flow Dnd getting called")

  const handletype = useSelector((state: RootState) => state.handle)

  const strokeColor = getHandleColor(handletype);

  useEffect(() => {
    if(deletePressed) 
    {
      dispatch(removeEdge(edgeDeleted))
      dispatch(removeNode(nodeDeleted))
    }
  }, [deletePressed, nodeDeleted, edgeDeleted, dispatch]);



  const onEdgeUpdate = useCallback(
    (oldEdge, newConnection) => setEdges((els) => updateEdge(oldEdge, newConnection, els)),
    []
  );


  const onNodeClick = useCallback((node, event) => {
    setnodeDeleted(event.id)
    setedgeDeleted("")
    dispatch(selectedNode(event.id))
  }, []);

  const onEdgeClick = useCallback((event, edge) => {
    setedgeDeleted(edge.id)
    setnodeDeleted("")
  }, [])



  const onNodesChange = useCallback(
    (changes) => {
      const updatedNodes = applyNodeChanges(changes, nodes);
      dispatch(setNodes(updatedNodes));
    },
    [dispatch, nodes]
  );

  const onLoad = (reactFlowInstance) => {
    console.log({reactFlowInstance})
    const mynode = reactFlowInstance.getNode("1")
    const symbolprop = Object.getOwnPropertySymbols(mynode);
    const handleBounds = (mynode as unknown as any)[symbolprop[0]].handleBounds

  }

  const onConnect = useCallback(
    (params) =>
      {
        const sourceId = params.source;
        const targetId = params.target;

        const targetNode = nodes.find(node => node.id === targetId);


        console.log({params})

        console.log("isValid called from onConnect", isValid)
        if(isValid) {
          console.log("onConnect called")
          dispatch(addEdge({
              ...params,
              animated: false,
              style: { stroke: `${strokeColor}` },
              type: "step",
              label: `${handletype.label}`,
              markerEnd: {
                type: MarkerType.ArrowClosed,
                width: 35,
                height: 35,
                color: strokeColor,
            },
          }));
        }
        },
    [strokeColor, handletype.label, nodes, isValid, dispatch]
  );

  

  const onConnectEnd = (event) => {
    console.log('on connect end', event);
    if(!isValid) {
      // alert("Invalid connection")
      notifications.show(
        {
          title: 'Connection Error',
          message: 'You cannot connect those nodes',
          autoClose: 3000,
          withCloseButton: true,
          color: 'red',
          icon: <X/>,
          styles: (theme) => ({
            root: {
              backgroundColor: theme.colors.white,
            },
            title: { color: theme.white },
            description: { color: theme.white },

            closeButton: {
              color: theme.white,
              '&:hover': { backgroundColor: theme.white },
            },
          }),
          style: { backgroundColor: '#194D33' },
      }
      )
      dispatch(resetIsValid(true))
    }
  }



  const onDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);


  const nodeTypes = useMemo(() => ({ start: StartNode, end: EndNode, review: ReviewNode, confirmation: ConfirmationNode,
                                     request: RequestNode, payment: PaymentNode
                                  }), []);

  const edgeTypes = useMemo(() => ({ buttonedge: ButtonEdge,
                                  }), [])

  const handles = {
    start: ["default"],
    request: ["Yes"],
    review: ["ReviewApprove", "ReviewReject", "ReviewAdjust"],
    confirmation: ["ConfirmationYes", "ConfirmationNo"],
    payment: ["ElectronicPayment", "CashPayment"],
    end: []
  };

  const checkNodeEdges = (node, edges, handles) => {
    const nodeType = node.type;
    const nodeHandles = handles[nodeType];
  
    // Find all edges where this node is the source
    const sourceEdges = edges.filter(edge => edge.source === node.id);
  
    // Check if the number of source edges is equal to the number of handles for this node's type
    if (sourceEdges.length >= nodeHandles.length) {
      return null;
    } else {
      return node;
    }
  }

  

  const saveDiagram = () => {
    let allNodesValid = true;
    nodes.forEach(node => {
      const result = checkNodeEdges(node, edges, handles);
      if (result !== null) {
        allNodesValid = false;
        console.log(`Node ${result.id} has incorrect edges`);
        notifications.show(
          {
            title: 'Cannot Save: Missing Edges',
            message: `Node "${result.data.label}" handles are not fully connected.`,
            autoClose: 3000,
            withCloseButton: true,
            color: 'red',
            icon: <X/>,
            styles: (theme) => ({
              root: {
                backgroundColor: theme.colors.white,
              },
              title: { color: theme.white },
              description: { color: theme.white },
  
              closeButton: {
                color: theme.white,
                '&:hover': { backgroundColor: theme.white },
              },
            }),
            style: { backgroundColor: '#b91c1c' },
        }
        )
      }
    });

    if(allNodesValid) {
      console.log("Success!")
      console.log({nodes})
      console.log({edges})
    }
    // const edgesdata = JSON.stringify(edges);
    // const nodesdata = JSON.stringify(nodes);
    // const blob1 = new Blob([edgesdata], {type: 'application/typescript'});
    // const blob2 = new Blob([nodesdata], {type: "application/typescript"})
    // FileSaver.saveAs(blob1, 'edges.ts');
    // FileSaver.saveAs(blob2, 'nodes.ts');
  }


  return (
    <div className="dndflow min-h-screen p-2 rounded-sm mb-2.5 flex flex-col">
      <Button onClick={() => saveDiagram()} className='bg-blue-700 hover:bg-blue-800 w-fit self-end mb-2'>Save</Button>
      <ReactFlowProvider>
        <div className="reactflow-wrapper flex-grow" ref={reactFlowWrapper}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onConnect={onConnect}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onInit={onLoad}
            onDragOver={onDragOver}
            onEdgeUpdate={onEdgeUpdate}
            onNodeClick={onNodeClick}
            onEdgeClick={onEdgeClick}
            nodeTypes={nodeTypes}
            connectionLineStyle={connectionLineStyle}
            connectionRadius={30}
            onConnectEnd={onConnectEnd}
            edgeTypes={edgeTypes}
            className="flow_react"
            fitView
          >
            <Background className="bg-white" variant={BackgroundVariant.Dots} />
            <Controls />
          </ReactFlow>
        </div>
        
      </ReactFlowProvider>
    </div>
  );
};

export default ReactFlowDnd;
