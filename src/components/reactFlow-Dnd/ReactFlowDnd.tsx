import React, { useState, useRef, useCallback } from 'react';
import ReactFlow, {
  ReactFlowProvider,
  addEdge,
  useNodesState,
  useEdgesState,
  Controls,
  Node,
  Edge,
  ReactFlowInstance,
  Connection,
  getConnectedEdges,
  Background,
  BackgroundVariant
} from 'reactflow';


import StartNode from './StartNode';
import { useSelector } from 'react-redux';
import { RootState } from '../../redux/store';
import { useMemo } from 'react';

import 'reactflow/dist/style.css';


import SideBar from './sideBar';

import '../../index.css';
import EndNode from './EndNode';
import ReviewNode from './ReviewNode';
import ConfirmationNode from './ConfirmationNode';
import RequestNode from './RequestNode';
import EventEndExitNode from './eventEndExitNode';
import EventEndNode from './eventEndNode';
import { getHandleColor } from '../../redux/handle';
import PaymentNode from './PaymentNode';
import initialNodesList from './initialNodesList';

import * as FileSaver from 'file-saver';
import edgesTrial from './edges';
import nodesTrial from './nodes';

const connectionLineStyle = { stroke: '#040000' };

// const initialNodes: Node[] = [
//   {
//     id: '1',
//     type: 'start',
//     data: { label: 'Start' },
//     position: { x: 200, y: 150 },
//   },
//   {
//     id: '2',
//     type: 'end',
//     data: { label: 'End'},
//     position: { x: 400, y: 600},
//   }
// ];


const initialNodes: Node[] = nodesTrial
const initalEdges: Edge[] = edgesTrial

let id = 0;
const getId = () => `dndnode_${id++}`;



const ReactFlowDnd = () => {
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge[]>(initalEdges);
  const [reactFlowInstance, setReactFlowInstance] = useState<ReactFlowInstance | null>(null);

  const handletype = useSelector((state: RootState) => state.handle)

  const strokeColor = getHandleColor(handletype);

  console.log({strokeColor})
  

  // const onConnect = useCallback(
  //   (connection: Connection) => setEdges((eds) => addEdge(connection, eds)),
  //   [setEdges]
  // );

  const onConnect = useCallback(
    (params) =>
      {
        console.log(handletype.label)
        setEdges((eds) => addEdge({ ...params, animated: false, style: { stroke: `${strokeColor}` }, type: "step", label: `${handletype.label}` }, eds))},
    [setEdges, strokeColor, handletype.label]
  );

  console.log(edges)
  console.log(nodes)

  const onDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const nodeLabel = useSelector((state: RootState) => state.event.label)
  

  const type = useSelector((state: RootState) => state.event.type)
  
  // console.log(nodeName)

  const onDrop = useCallback(
    (event: React.DragEvent) => {
      event.preventDefault();

      const reactFlowBounds = reactFlowWrapper.current!.getBoundingClientRect();
      // const type = event.dataTransfer.getData('application/reactflow');


      // check if the dropped element is valid
      if (typeof type === 'undefined' || !type) {
        return;
      }

      const position = reactFlowInstance!.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      const newNode: Node = {
        id: getId(),
        type,
        position,
        data: { label: nodeLabel },
      };

      setNodes((nds: Node[]) => nds.concat(newNode));
      console.log(nodes)
    },
    [reactFlowInstance, nodeLabel]
  );

  const nodeTypes = useMemo(() => ({ start: StartNode, end: EndNode, review: ReviewNode, confirmation: ConfirmationNode,
                                     request: RequestNode, eventEndExit: EventEndExitNode, eventEnd: EventEndNode, payment: PaymentNode
                                  }), []);
  // console.log(getConnectedEdges(nodes, edges))

  const saveDiagram = () => {
    const edgesdata = JSON.stringify(edges);
    const nodesdata = JSON.stringify(nodes);
    const blob1 = new Blob([edgesdata], {type: 'application/typescript'});
    const blob2 = new Blob([nodesdata], {type: "application/typescript"})
    FileSaver.saveAs(blob1, 'edges.ts');
    FileSaver.saveAs(blob2, 'nodes.ts');
  }


  const onNodeClick = () => {
    
  }

  

  return (
    <div className="dndflow min-h-screen p-2 rounded-sm mb-2.5 flex justify-center items-center flex-row-reverse">
      <ReactFlowProvider>
        <div className="reactflow-wrapper min-h-screen" ref={reactFlowWrapper}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
            nodeTypes={nodeTypes}
            connectionLineStyle={connectionLineStyle}
            fitView
          >
            <Background className="" variant={BackgroundVariant.Lines} />
            <Controls />
          </ReactFlow>
        </div>
        <SideBar saveDiagram = {saveDiagram}/>
      </ReactFlowProvider>
    </div>
  );
};

export default ReactFlowDnd;
