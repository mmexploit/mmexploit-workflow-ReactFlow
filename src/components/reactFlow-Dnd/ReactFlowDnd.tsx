import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactFlow, {
  ReactFlowProvider,
  addEdge,
  useNodesState,
  useEdgesState,
  Node,
  Edge,
  Controls,
  ReactFlowInstance,
  Connection,
  getConnectedEdges,
  MarkerType,
  updateEdge,
  Background,
  BackgroundVariant,
} from "reactflow";


import StartNode from './StartNode';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../../redux/store';
import { useMemo } from 'react';

import 'reactflow/dist/style.css';


import SideBar from './sideBar';

import '../../index.css';
import EndNode from './EndNode';
import ReviewNode from './ReviewNode';
import ConfirmationNode from './ConfirmationNode';
import RequestNode from './RequestNode';
import EventEndExitNode from './eventEndExitNode';
import EventEndNode from './eventEndNode';
import { getHandleColor } from '../../redux/handle';
import PaymentNode from './PaymentNode';

import * as FileSaver from 'file-saver';
import edgesTrial from './edges';
import nodesTrial from './nodes';
import { useKeyPress } from 'reactflow';
import { Notification } from '@mantine/core';
import { X } from 'tabler-icons-react';

import { Notifications } from '@mantine/notifications';
import { resetIsValid } from '../../redux/validation';
import { notifications } from '@mantine/notifications';


const connectionLineStyle = { stroke: '#040000' };

// const initialNodes: Node[] = [
//   {
//     id: '1',
//     type: 'start',
//     data: { label: 'Start' },
//     position: { x: 200, y: 150 },
//   },
//   {
//     id: '2',
//     type: 'end',
//     data: { label: 'End'},
//     position: { x: 400, y: 600},
//   }
// ];

const existingEdges = edgesTrial;

const reformattedEdges :Edge[] = [];

existingEdges.forEach((edge) => {
  const reformattedEdge = {
    id: edge.id,
    type: 'step',
    source: edge.source,
    target: edge.target,
    sourceHandle: edge.sourceHandle,
    targetHandle: edge.targetHandle,
    label: edge.label,
    style: edge.style,
    animated: false,
    markerEnd: {
      type: MarkerType.ArrowClosed,
      width: 30,
      height: 30,
      color: edge.style.stroke
    },
  };

  reformattedEdges.push(reformattedEdge);
})

const initialNodes: Node[] = nodesTrial
const initalEdges: Edge[] = reformattedEdges

let id = 20;
const getId = () => `dndnode_${id++}`;


const ReactFlowDnd = () => {
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge[]>(initalEdges);
  const [reactFlowInstance, setReactFlowInstance] = useState<ReactFlowInstance | null>(null);
  const [nodeDeleted, setnodeDeleted] = useState("")
  const [edgeDeleted, setedgeDeleted] = useState("")
  const deletePressed = useKeyPress('Delete')
  const isValid = useSelector((state: RootState) => state.validation.isValid)

  const dispatch = useDispatch()

  

  console.log("React Flow Dnd getting called")

  const handletype = useSelector((state: RootState) => state.handle)

  const strokeColor = getHandleColor(handletype);

    const handleEdgeDelete = useCallback((edgeId) => {
    // Filter out the edge that needs to be deleted
    const updatedEdges = edges.filter(edge => edge.id !== edgeId);

    // Remove the edge from the flow
    setEdges(updatedEdges);
  }, [edges, setEdges]);

  const undoEdgeDelete = (edgeId) => {
    edges.push()
  }

  const handleNodeDelete = useCallback((nodeId) => {
    // Filter out the node that needs to be deleted
    const updatedNodes = nodes.filter(node => node.id !== nodeId);
    // Remove the node from the flow
    setNodes(updatedNodes);
  }, [nodes, setNodes]);

  useEffect(() => {
    if(deletePressed) 
    {
      handleEdgeDelete(edgeDeleted)
      handleNodeDelete(nodeDeleted)
    }
  }, [deletePressed, nodeDeleted, edgeDeleted, handleEdgeDelete, handleNodeDelete]);



  const onEdgeUpdate = useCallback(
    (oldEdge, newConnection) => setEdges((els) => updateEdge(oldEdge, newConnection, els)),
    []
  );


  const onNodeClick = useCallback((node, event) => {
    setnodeDeleted(event.id)
    setedgeDeleted("")
    console.log({event})
    console.log(`Node ${event.id} clicked`);
  }, []);

  const onEdgeClick = useCallback((event, edge) => {
    setedgeDeleted(edge.id)
    setnodeDeleted("")
  }, [])



  const onConnect = useCallback(
    (params) =>
      {
        const sourceId = params.source;
        const targetId = params.target;

        const targetNode = nodes.find(node => node.id === targetId);

        targetNode.data.connected = true;

        console.log({params})

        console.log("isValid called from onConnect", isValid)
        if(isValid) {
          setEdges((eds) => addEdge({ ...params, animated: false, style: { stroke: `${strokeColor}` }, type: "step", label: `${handletype.label}`, markerEnd: {
            type: MarkerType.ArrowClosed,
            width: 35,
            height: 35,
            color: strokeColor
          }, }, eds))
        }
        },
    [setEdges, strokeColor, handletype.label, nodes, isValid]
  );

  const onConnectEnd = (event) => {
    console.log('on connect end', event);
    if(!isValid) {
      // alert("Invalid connection")
      notifications.show(
        {
          title: 'Connection Error',
          message: 'You cannot connect those nodes',
          autoClose: 3000,
          withCloseButton: true,
          color: 'red',
          icon: <X/>,
          styles: (theme) => ({
            root: {
              backgroundColor: theme.colors.white,
            },
            title: { color: theme.white },
            description: { color: theme.white },

            closeButton: {
              color: theme.white,
              '&:hover': { backgroundColor: theme.white },
            },
          }),
          style: { backgroundColor: 'red' },
      }
      )
      dispatch(resetIsValid(true))
    }
  }



  const onDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const nodeLabel = useSelector((state: RootState) => state.event.label)
  

  const type = useSelector((state: RootState) => state.event.type)


  const onDrop = useCallback(
    (event: React.DragEvent) => {
      event.preventDefault();

      const reactFlowBounds = reactFlowWrapper.current!.getBoundingClientRect();
      // const type = event.dataTransfer.getData('application/reactflow');


      // check if the dropped element is valid
      if (typeof type === 'undefined' || !type) {
        return;
      }

      const position = reactFlowInstance!.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      const newNode: Node = {
        id: getId(),
        type,
        position,
        data: { label: nodeLabel, connected: false },
      };

      setNodes((nds: Node[]) => nds.concat(newNode));
      console.log(nodes)
    },
    [reactFlowInstance, nodeLabel, nodes, setNodes]
  );

  const nodeTypes = useMemo(() => ({ start: StartNode, end: EndNode, review: ReviewNode, confirmation: ConfirmationNode,
                                     request: RequestNode, eventEndExit: EventEndExitNode, eventEnd: EventEndNode, payment: PaymentNode
                                  }), []);
  // console.log(getConnectedEdges(nodes, edges))

  const saveDiagram = () => {
    const edgesdata = JSON.stringify(edges);
    const nodesdata = JSON.stringify(nodes);
    const blob1 = new Blob([edgesdata], {type: 'application/typescript'});
    const blob2 = new Blob([nodesdata], {type: "application/typescript"})
    FileSaver.saveAs(blob1, 'edges.ts');
    FileSaver.saveAs(blob2, 'nodes.ts');
  }


  return (
    <div className="dndflow min-h-screen p-2 rounded-sm mb-2.5 flex justify-center items-center flex-row-reverse">
      <ReactFlowProvider>
        <div className="reactflow-wrapper min-h-screen" ref={reactFlowWrapper}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
            onEdgeUpdate={onEdgeUpdate}
            onNodeClick={onNodeClick}
            onEdgeClick={onEdgeClick}
            onNodesDelete={handleNodeDelete}
            nodeTypes={nodeTypes}
            connectionLineStyle={connectionLineStyle}
            connectionRadius={30}
            onConnectEnd={onConnectEnd}
            className="flow_react"
            fitView
          >
            <Background className="" variant={BackgroundVariant.Lines} />
            <Controls />
          </ReactFlow>
        </div>
        <SideBar saveDiagram = {saveDiagram}/>
      </ReactFlowProvider>
    </div>
  );
};

export default ReactFlowDnd;
