import React, { useState, useRef, useCallback } from 'react';
import ReactFlow, {
  ReactFlowProvider,
  addEdge,
  useNodesState,
  useEdgesState,
  Controls,
  Node,
  Edge,
  ReactFlowInstance,
  Connection
} from 'reactflow';

import CustomOptionsNode from './CustomNode';
import StartNode from './StartNode';
import { useSelector } from 'react-redux';
import { RootState } from '../../redux/store';
import { useMemo } from 'react';
import CustomEdge from './CustomEdgeComponent';

import 'reactflow/dist/style.css';


import SideBar from './sideBar';

import '../../index.css';
import EndNode from './EndNode';

const connectionLineStyle = { stroke: 'white' };

const initialNodes: Node[] = [
  {
    id: '1',
    type: 'start',
    data: { label: 'Start' },
    position: { x: 200, y: 150 },
  },
  {
    id: '2',
    type: 'end',
    data: { label: 'End'},
    position: { x: 400, y: 600},
  }
];

let id = 0;
const getId = () => `dndnode_${id++}`;

const ReactFlowDnd = () => {
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge[]>([]);
  const [reactFlowInstance, setReactFlowInstance] = useState<ReactFlowInstance | null>(null);

  const onConnect = useCallback(
    (connection: Connection) => setEdges((eds) => addEdge(connection, eds)),
    [setEdges]
  );
  const onDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const nodeName = useSelector((state: RootState) => state.event.event)
  const nodeTypes = useMemo(() => ({ start: StartNode, end: EndNode}), []);
  const edgeTypes = {custom: CustomEdge};

  
  // console.log(nodeName)

  const onDrop = useCallback(
    (event: React.DragEvent) => {
      event.preventDefault();

      const reactFlowBounds = reactFlowWrapper.current!.getBoundingClientRect();
      const type = event.dataTransfer.getData('application/reactflow');


      // check if the dropped element is valid
      if (typeof type === 'undefined' || !type) {
        return;
      }

      console.log(type)

      const position = reactFlowInstance!.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      const newNode: Node = {
        id: getId(),
        type,
        position,
        data: { label: nodeName },
      };

      setNodes((nds: Node[]) => nds.concat(newNode));
      console.log(nodes)
    },
    [reactFlowInstance, nodeName]
  );

  return (
    <div className="dndflow h-4/6 p-2 rounded-sm mb-2.5 flex justify-center items-center flex-row-reverse">
      <ReactFlowProvider>
        <div className="reactflow-wrapper" ref={reactFlowWrapper}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
            nodeTypes={nodeTypes}
            connectionLineStyle={connectionLineStyle}
            fitView
          >
            <Controls />
          </ReactFlow>
        </div>
        <SideBar/>
      </ReactFlowProvider>
    </div>
  );
};

export default ReactFlowDnd;
