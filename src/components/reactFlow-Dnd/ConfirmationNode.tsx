import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Handle, Position } from 'reactflow';
import { addHandle } from '../../redux/handle';
import { NodeToolbar } from 'reactflow';
import { Button } from '@mantine/core';
import WarningSign from './WarningSign';
import { isValidConnection, setAllowedNodes } from '../../redux/validation';
import { RootState } from '../../redux/store';
import { CirclePlus } from 'tabler-icons-react';
import { Tooltip } from 'react-tooltip';
import ModalContainer from './ModalContainer';
import { useDisclosure } from '@mantine/hooks';
import { DotsVertical } from 'tabler-icons-react';
import DotDropDown from './DotDropDown';
import { notifications } from '@mantine/notifications';

import { X } from 'tabler-icons-react';


const ConfirmationNode = ( {data, selected, ...otherProps} ) => {

  const dispatch = useDispatch()
  const isValid = useSelector((state: RootState) => state.validation.isValid)
  const [opened, { open, close }] = useDisclosure(false);
  const [returned, setReturned] = useState(false)
  const [ openedDrop, setOpenedDrop ] = useState(false)

  const selectedNode = useSelector((state: RootState) => state.nodes.selectedNode)

  console.log("Selected node from Confirmation Node",{selectedNode})

  const edges = useSelector((state: RootState) => state.edges.edges)

  const throwError = () => {
    notifications.show(
      {
        title: ' Error adding Task',
        message: 'You cannot add more nodes since you already have an edge connected to this handle. Use the button on the edge if you wish to add a task in between.',
        autoClose: 3000,
        withCloseButton: true,
        color: 'red',
        icon: <X/>,
        styles: (theme) => ({
          root: {
            backgroundColor: theme.colors.white,
          },
          title: { color: theme.white },
          description: { color: theme.white },

          closeButton: {
            color: theme.white,
            '&:hover': { backgroundColor: theme.white },
          },
        }),
        style: { backgroundColor: 'red' },
    }
    )
  }

  const checkExistingEdge = (handle , id) => {
    console.log({handle}, {id})
    return edges.find((edge) => edge.source === id && edge.sourceHandle === handle) !== undefined;
  }

  return ( 
    <>
      {/* <NodeToolbar position={Position.Right}>
        <Button className='bg-red-700 hover:bg-red-900'>Delete</Button>
      </NodeToolbar> */}
      
      <div className={`p-2 cursor-grab flex justify-center rounded-sm bg-white border-blue-700 border-2 hover:border-green-700 w-[278px] ${selected ? 'border-4 border-green-700' : 'bg-white'}`}>
        <Handle type='target' position={Position.Top} id="in"/>
        <Handle className='-ml-16 w-4 h-4 bg-transparent border-none cursor-pointer z-100' type="source" position={Position.Bottom} id="ConfirmationYes" 
          isValidConnection={(connection) => {
            dispatch(setAllowedNodes(["dndnode_4"]))
            dispatch(isValidConnection(connection))
            return isValid
          }}
          onClick={(event) => {
            console.log("From handle Click",{selectedNode})
            const existingEdge = checkExistingEdge("ConfirmationYes", selectedNode)
            console.log({existingEdge})
            if(!existingEdge) 
              open();
            else {throwError()}
            }} >
              <CirclePlus
                  size={18}
                  strokeWidth={2.5}
                  color={'#ffffff'}
                  className= "inline-block absolute fill-green-700 color-white"
                  data-tooltip-id="confirmation-yes-tooltip"
                  data-tooltip-content="Confirmation Yes"
                  onClick={() => dispatch(addHandle("ConfirmationYes"))}
              />
              <Tooltip className="flex flex-row inline mt-4 w-max bg-slate-600 text-sm text-white p-1 rounded-md" id="confirmation-yes-tooltip" />
          </Handle>
        <Handle className='ml-16 w-4 h-4 bg-transparent border-none cursor-pointer z-100' type="source" position={Position.Bottom} id="ConfirmationNo" 
          onClick={(event) => {
            open()
            }}>
            <CirclePlus
                  size={18}
                  strokeWidth={2.5}
                  color={'#ffffff'}
                  className= "inline-block absolute fill-red-700 color-white z-0 mr-10"
                  data-tooltip-id="confirmation-no-tooltip"
                  data-tooltip-content="Confirmation No"
                  onClick={() => dispatch(addHandle("ConfirmationNo"))}
              />
              <Tooltip className="flex flex-row inline mt-4 w-max bg-slate-600 text-sm text-white p-1 rounded-md" id="confirmation-no-tooltip" />
            </Handle>
            <ModalContainer opened={opened} onClose={close} returned={returned} fromEdge={false} edgeId={""} otherProps={otherProps}/>
          <DotsVertical onClick={() => setOpenedDrop(!openedDrop)} className='absolute right-1 cursor-pointer' size={15} strokeWidth={2} color={'#000000'} />
          <label>{data.label}</label>
          <DotDropDown opened={openedDrop} setOpened={setOpenedDrop}/>
      </div>
     </>
  );
}

export default ConfirmationNode;


// Position rendereing of the nodes sould be done dynamically
// Nodes addded from the edge with button should come with a modal for user to select to which each handle of the node added should go to(>1 output handle)
// And the nodes to choose form in the modal should be those already painted in the panel
// The task list to choose from should only include tasks/nodes not already added to the panel

