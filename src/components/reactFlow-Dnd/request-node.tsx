import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { Handle, Position } from 'reactflow';
import { addHandle } from '../../redux/handle';
import { CirclePlus } from 'tabler-icons-react';
import ModalContainer from './modal-container';
import { DotsVertical } from 'tabler-icons-react';
import { useDisclosure } from '@mantine/hooks';
import DotDropDown from './dot-drop-down';


const RequestNode = ( {data, selected, ...otherProps}) => {

  const dispatch = useDispatch()
  const [opened, { open, close }] = useDisclosure(false);
  const [returned, setReturned] = useState(false)
  const [ openedDrop, setOpenedDrop ] = useState(false)

  return ( 
    <>
      {/* <NodeToolbar position={Position.Right}>
        <Button className='bg-red-700 hover:bg-red-900'>Delete</Button>
      </NodeToolbar> */}
      <div className={`p-2 cursor-grab flex justify-center rounded-sm bg-white border-blue-700 border-2 hover:border-green-700 w-[278px] ${selected ? 'border-4 border-green-700' : 'bg-white'}`}>
        <Handle type='target' position={Position.Top} id="in"/>
        <Handle className='w-4 h-4 bg-transparent border-none cursor-pointer z-100' type="source" position={Position.Bottom} id="Yes" 
          onClick={(event) => {
            open()
            }}>
            <CirclePlus
                  size={18}
                  strokeWidth={2.5}
                  color={'#ffffff'}
                  className= "inline-block absolute fill-green-700 color-white z-0 mr-10"
                  data-tooltip-id="Request-tooltip"
                  data-tooltip-content=""
                  onClick={() => dispatch(addHandle("Yes"))}
            />
            </Handle>
        <Handle type="target" position={Position.Left} id="Returned-left"/>
        <Handle type='target' position={Position.Right} id="Returned-right"/>
          <DotsVertical onClick={() => setOpenedDrop(!openedDrop)} className='absolute right-1 cursor-pointer' size={15} strokeWidth={2} color={'#000000'} />
          <label>{data.label}</label>
          <DotDropDown opened={openedDrop} setOpened={setOpenedDrop}/>
          <ModalContainer opened={opened} onClose={close} returned={returned} fromEdge={false} edgeId={""} otherProps={otherProps}/>
      </div>
    </>
  );
}

export default RequestNode;