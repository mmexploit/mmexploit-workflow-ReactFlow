import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { Node } from "reactflow";
import { RootState } from "./store";

interface NodesState {
  nodes: Node[];
  selectedNode: string
}

const initialState: NodesState = {
  nodes: [
    {
      id: "1",
      type: "start",
      data: { label: "Start" },
      position: { x: 200, y: 150 },
    },
    {
      id: "2",
      type: "end",
      data: { label: "End" },
      position: { x: 756.7932572510128, y: 1115.0229916856513 },
    },
  ],
  selectedNode: ""
};

const nodesSlice = createSlice({
  name: "nodes",
  initialState,
  reducers: {
    setNodes: (state, action: PayloadAction<Node[]>) => {
      state.nodes = action.payload;
    },
    addNode: (state, action: PayloadAction<Node>) => {
      const nodeToAdd = action.payload;
      const existingNode = state.nodes.find((node) => node.id === nodeToAdd.id);
      if (!existingNode) {
        state.nodes.push(nodeToAdd);
      }
    },
    updatePosition: (
      state,
      action: PayloadAction<{ addedNode: string; y: number }>
    ) => {
      const updatedNodes = state.nodes.map((node) => {
        console.log(node.id !== action.payload.addedNode);
        if (
          node.position.y >= action.payload.y &&
          node.id !== action.payload.addedNode.toString() &&
          node.type !== "start" &&
          node.type !== "end"
        ) {
          // If the current node matches the id, set the flag to true
          return {
            ...node,
            position: {
              x: node.position.x,
              y: node.position.y + 120,
            },
          };
        } else {
          // Otherwise, don't update the position
          return node;
        }
      });
      state.nodes = updatedNodes;
    },
    removeNode: (state, action: PayloadAction<string>) => {
      const nodeIdToRemove = action.payload;
      state.nodes = state.nodes.filter((node) => node.id !== nodeIdToRemove);
    },
    selectedNode: (state, action: PayloadAction<string>) => {
      state.selectedNode = action.payload
    }
  },
});

export const { setNodes, addNode, updatePosition, removeNode, selectedNode } = nodesSlice.actions;

export default nodesSlice.reducer;
