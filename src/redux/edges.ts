import { createSlice } from '@reduxjs/toolkit';
import { MarkerType } from 'reactflow';
import { Edge } from 'reactflow';

interface State {
  edges: Edge[];
}

const initialState: State = {
  edges: [],
};

export const edgesSlice = createSlice({
  name: 'edges',
  initialState,
  reducers: {
    addEdge: (state, action) => {
      const { animated, style, type, label, markerEnd, id } = action.payload;
      const existingEdgeIndex = state.edges.findIndex(edge => edge.id === id);
        if (existingEdgeIndex !== -1) {
            // If an edge with the same id exists, return the current state without adding the new edge
            return state;
        }

      const newEdge = {
        ...action.payload,
        animated: animated !== undefined ? animated : false,
        style: style !== undefined ? style : { stroke: 'black' },
        type: type !== undefined ? type : 'step',
        label: label !== undefined ? label : '',
        markerEnd: markerEnd !== undefined ? markerEnd : { type: MarkerType.Arrow, width: 35, height: 35, color: 'black' },
      };
      state.edges.push(newEdge);
    },
    setEdges: (state, action) => {
      state.edges = action.payload;
    },
  },
});

export const { addEdge, setEdges } = edgesSlice.actions;

export default edgesSlice.reducer;
